{"version":3,"file":"static/js/245.66eba63f.chunk.js","mappings":"kRAIaA,EAAmBC,EAAAA,GAAAA,IAAH,oGAOhBC,EAAwBD,EAAAA,GAAAA,IAAH,uCAIrBE,EAAcF,EAAAA,GAAAA,IAAH,uDAKXG,EAAQH,EAAAA,GAAAA,IAAH,oIClBLI,EAA0BJ,EAAAA,GAAAA,IAAH,wE,SCIrB,SAASK,IACpB,IAIMC,GAAWC,EAAAA,EAAAA,MAEjB,OAAO,+BACP,UAACH,EAAD,YACG,mDACA,wBATc,CACb,CAACI,KAAM,OAAQC,KAAM,QACrB,CAACD,KAAM,UAAWC,KAAM,YAQfC,KAAI,YAAmB,IAAD,IAAhBF,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACrB,OAAO,yBAAe,SAAC,KAAD,CAAME,GAAIH,EAAiBI,MAAO,CAACC,KAAI,oBAAEP,EAASM,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,KAAjE,SACbJ,GADkCD,IAA3BA,EAGnB,UAKJ,CCrBc,SAASM,IAAgB,IAAD,IAC5BC,GAAWC,EAAAA,EAAAA,MAAXD,QAKP,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAKC,EAAL,KAAgBC,EAAhB,KAEMb,GAAWC,EAAAA,EAAAA,OAEjBa,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAkB,mCAAG,+GAGDC,MAAM,sCAAD,OAAuCP,EAAvC,oBAVvB,mCAUuB,oBAHJ,cAGjBQ,EAHiB,gBAIJA,EAAQC,OAJJ,cAIjBC,EAJiB,yBAKhBN,EAAaM,IALG,kCAO3BC,QAAQC,IAAI,KAAMC,SAClBF,QAAQC,IAAI,kEARe,0DAAH,qDAUxBN,GACH,GAAE,CAACN,IA+BJ,IAAMc,EAAY,oBAAGvB,EAASM,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAExCiB,EAA0FZ,EAA1FY,YAAaC,EAA6Eb,EAA7Ea,MAAOC,EAAsEd,EAAtEc,KAAMC,EAAgEf,EAAhEe,aAAcC,EAAkDhB,EAAlDgB,eAAgBC,EAAkCjB,EAAlCiB,aAAcC,EAAoBlB,EAApBkB,SAAUC,EAAUnB,EAAVmB,OAErF,OAAO,iCACH,SAAC,KAAD,CAAM1B,GAAIkB,EAAV,sBACA,UAAC9B,EAAD,YACA,SAACG,EAAD,WACA,SAACC,EAAD,CAAOmC,IAAKR,GAAW,UA3DR,+BA2DQ,OA1DR,YA0DQ,OAAiCA,GAAeS,IAAKR,GAASC,OAErF,UAAC/B,EAAD,YACC,kCAAQ8B,GAASC,EAAjB,aAxCL,SAAgCC,EAAcC,GAC1C,OAAID,EACmBA,EAAaO,MAAM,IAClBC,OAAO,EAAG,GAAGC,KAAK,IAC7BR,EACUA,EAAeM,MAAM,IACpBC,OAAO,EAAG,GAAGC,KAAK,IAE/B,EAEd,CA8B8BC,CAAuBV,EAAcC,GAA/D,QACA,wCA7BL,SAA+BC,GAC3B,OAAIA,EAC6B,GAAxBA,EAAaS,QAAQ,GAErB,GAEV,CAuBkBC,CAAsBV,GAAtC,SACA,sCACA,uBAAIC,GAAY,8BAChB,oCACA,uBAzBL,SAAyBC,GACrB,IAAIS,EAAQ,GAKZ,OAJDT,GACCA,EAAO3B,KAAI,YAAa,IAAXsB,EAAU,EAAVA,KACZ,OAASc,EAAMC,KAAN,UAAcf,EAAd,KACT,IACMc,CACR,CAkBME,CAAgBX,YAGrB,SAAChC,EAAD,CAAsBO,MAAO,CAACC,KAAMgB,MACpC,SAAC,EAAAoB,SAAD,CAAUC,UAAU,gDAApB,UACA,SAAC,KAAD,QAGP,C","sources":["components/MovieDetails/MovieDetails.styled.jsx","components/AditionalInformation/AditionalInformation.styled.jsx","components/AditionalInformation/AditionalInformation.jsx","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components'\n\n\n\nexport const MainDetailsMovie = styled.div`\ndisplay: flex;\ngap: 15px;\nborder-bottom: 1px solid gray;\npadding: 15px;\n`\n\nexport const LayotImageDescription = styled.div`\nwidth: 600px;\n`\n\nexport const LayoutImage = styled.div`\nwidth: 280px;\nheight: 400px;\n`\n\nexport const Image = styled.img`\nobject-fit: cover;\nmax-width: 100%;\ndisplay: block;\nheight: 400px;\nwidth: 280px;\nborder-radius: 10px;\n`\n","import styled from 'styled-components'\n\nexport const BoxAditionalInformation = styled.div`\npadding: 15px;\nborder-bottom: 1px solid gray;\n`","import PropTypes from 'prop-types'\n\nimport {Link, useLocation} from 'react-router-dom'\nimport {BoxAditionalInformation} from './AditionalInformation.styled'\n\n\nexport default function AditionalInformation() {\n    const navItems = [\n        {href: 'cast', text: 'Cast'},\n        {href: 'reviews', text: 'Reviews'}\n    ]\n    const location = useLocation()\n\n    return <>\n    <BoxAditionalInformation>\n       <h2>Aditional Information</h2>\n       <ul>\n       {navItems.map(({href, text}) => {\n        return <li key={href}><Link to={href} key={href} state={{from: location.state?.from ?? \"/\"}}>\n                {text}\n                </Link></li>\n    })}\n       </ul>\n    </BoxAditionalInformation>\n\n    </>\n}\n\nAditionalInformation.propTypes = {\n    state: PropTypes.object.isRequired\n}","import {useParams, Link, useLocation, Outlet} from 'react-router-dom'\nimport { useEffect, useState, Suspense} from \"react\";\nimport {LayoutImage, Image, MainDetailsMovie, LayotImageDescription} from \"./MovieDetails.styled\"\nimport AditionalInformation from 'components/AditionalInformation/AditionalInformation'\n\nexport default function MovieDetails() {\n    const {movieId} = useParams()\n    const pathPoster = 'https://image.tmdb.org/t/p/'\n    const sizePoster = 'original'\n    const KEY = '3ec430a354e7116e3d9f9a41b82b2275'\n\n    let [dataMovie, setDataMovie] = useState('')\n   \n    const location = useLocation()\n\n    useEffect(() => {\n        const fetchDetailsMovies = async () => {\n            try{\n            \n            const dataApi = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`)\n            const data = await dataApi.json()\n            return setDataMovie(data)\n        }catch(error){\n        console.log(error.message)\n        console.log('Ошибка в fetchDetailsMovies')\n        }} \n        fetchDetailsMovies()\n    }, [movieId])\n\n    function processingReleasedYear(release_date, first_air_date) {\n        if (release_date) {\n            let ReleasedData = release_date.split('');\n            return ReleasedData.splice(0, 4).join('');\n          } else if (first_air_date) {\n            let ReleasedData = first_air_date.split(''); \n            return ReleasedData.splice(0, 4).join('');\n          } else {\n            return '';\n          }\n    }\n\n    function processingVoteAverage(vote_average) {\n        if (vote_average) {\n          return vote_average.toFixed(1)*10;\n        } else {\n          return '0';\n        }\n      }\n\n    function processingGenre(genres) {\n        let genre = [];\n    if(genres){\n        genres.map(({name}) => {\n         return   genre.push(`${name} `);\n        })}\n        return genre\n      }\n\n    const backLinkHref = location.state?.from ?? \"/\"\n\n    let {poster_path, title, name, release_date, first_air_date, vote_average, overview, genres} = dataMovie\n\n    return <>\n        <Link to={backLinkHref}>Go back</Link>\n        <MainDetailsMovie>\n        <LayoutImage>\n        <Image src={poster_path && `${pathPoster}${sizePoster}${poster_path}`} alt={title || name} />\n        </LayoutImage>\n        <LayotImageDescription>\n         <h1>{`${title || name} (${processingReleasedYear(release_date, first_air_date)})`}</h1>\n         <p>User Score: {processingVoteAverage(vote_average)} %</p>\n         <h2>Overview</h2>\n         <p>{overview || \"Movie overview not found\"}</p>\n         <h2>Genres</h2>\n         <p>{processingGenre(genres)}</p>\n        </LayotImageDescription>\n        </MainDetailsMovie>\n        <AditionalInformation state={{from: backLinkHref}}/>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n        </Suspense>\n    </>\n}"],"names":["MainDetailsMovie","styled","LayotImageDescription","LayoutImage","Image","BoxAditionalInformation","AditionalInformation","location","useLocation","href","text","map","to","state","from","MovieDetails","movieId","useParams","useState","dataMovie","setDataMovie","useEffect","fetchDetailsMovies","fetch","dataApi","json","data","console","log","message","backLinkHref","poster_path","title","name","release_date","first_air_date","vote_average","overview","genres","src","alt","split","splice","join","processingReleasedYear","toFixed","processingVoteAverage","genre","push","processingGenre","Suspense","fallback"],"sourceRoot":""}